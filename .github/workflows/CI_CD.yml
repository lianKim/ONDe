name: tHere_cicd_docker_image

on:
  push:
    branches: [ main_server ]

#docker image build and push on dockerhub
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout # 1
        uses: actions/checkout@v3

      - name: Set up JDK 11 # 2
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      ## 비공개 yml 작성
      ## create db-connection.yml
      - name: make db-connection.yml
        run: |
          # create db-connection.yml
          cd ./server/src/main/resources
          
          # db-connection.yml 파일 생성
          touch ./db-connection.yml
          
          # GitHub-Actions 에서 설정한 값을 db-connection.yml 파일에 쓰기
          echo "${{ secrets.DB_YML }}" >> ./db-connection.yml
        shell: bash

      ## create awsS3.yml
      - name: make awsS3.yml
        run: |
          # create awsS3.yml
          cd ./server/src/main/resources
          
          # awsS3.yml 파일 생성
          touch ./awsS3.yml

          # GitHub-Actions 에서 설정한 값을 awsS3.yml 파일에 쓰기
          echo "${{ secrets.AWS_S3_YML }}" >> ./awsS3.yml
        shell: bash

      ## create mail.yml
      - name: make mail.yml
        run: |
          # create mail.yml
          cd ./server/src/main/resources

          # mail.yml 파일 생성
          touch ./mail.yml

          # GitHub-Actions 에서 설정한 값을 mail.yml 파일에 쓰기
          echo "${{ secrets.MAIL_YML }}" >> ./mail.yml
        shell: bash

      ## create oauth2.yml
      - name: make oauth2.yml
        run: |
          # create oauth2.yml
          cd ./server/src/main/resources

          # oauth2.yml 파일 생성
          touch ./oauth2.yml

          # GitHub-Actions 에서 설정한 값을 oauth2.yml 파일에 쓰기
          echo "${{ secrets.OAUTH2_YML }}" >> ./oauth2.yml
        shell: bash

      # gradle build  -> Dockerfile 에서 진행
      - name: Build with Gradle
        run: |
          cd ./server
          chmod +x gradlew
          ./gradlew bootJar

      ## gradle build and docker image 빌드 및 도커허브에 push
      - name: docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          cd ./server
          docker build -t ${{ secrets.IMAGE }} .
          docker push ${{ secrets.IMAGE }}

  #배포 Job
  deploy:
    needs: build  # build 후에 실행되도록 정의
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ec2-user
          key: ${{ secrets.KEY }}
          script: |
            sudo docker rm -f $(docker ps -aq)
            sudo docker container rm there-server
            sudo docker pull ${{ secrets.IMAGE }}:latest
            sudo docker run -d --name there-server -p 8080:8080 ${{ secrets.IMAGE }}:latest
